#include <iostream>
using namespace std;

// Function for Comb sort
void combSort(int arr[], int n) 
{
    int gap = n;
    bool swapped = true;

    while (gap != 1 || swapped==true) //if the gap is more than 1 between the elements or the last iteration caused a swap, keep the loop running
	{
        gap = (gap * 10) / 13; //shrink factor 
        if (gap < 1) 
		{
            gap = 1; //so that gap isnt smaller than one between the elements
        }

        swapped = false; //no swapping occured 

        for (int i = 0; i < n - gap; i++) //all elements are compared in this iteration's gap
		{
            if (arr[i] > arr[i + gap]) 
			{
                swap(arr[i], arr[i + gap]);
                swapped = true;
            }
        }
    }
}

// Printing the array
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

int main() {
    int num_elements;
    cout << "How many elements are in the array? " << endl;
    cin >> num_elements;

    int *arr = new int[num_elements];
    
    cout << "Enter the elements of the array: " << endl;
    for (int i = 0; i < num_elements; i++) {
        cout << "Element " << i << ": ";
        cin >> arr[i];
    }

    // Function Call
    combSort(arr, num_elements);

    cout << "Sorted array: " << endl;
    printArray(arr, num_elements);

    delete[] arr; 
}
